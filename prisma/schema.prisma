// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  password            String
  imgurl              String
  bgurl               String                @default("https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.inc.com%2Famy-george%2Fwhat-your-linkedin-cover-photo-says-about-you-if-you-have-one-you-better-have-one.html&psig=AOvVaw1XWIdYX1nU1nv3b3OYqh0B&ust=1722179838084000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCMC4yf_Bx4cDFQAAAAAdAAAAABAE")
  comment             comment[]
  watchlater          watchlater[]
  dislike             dislike[]
  follows             follows[]
  commentlike         commentlike[]
  views               views[]
  annoucement         annoucement[]
  annoucementlike     annoucementlike[]
  annoucementbookmark annoucementbookmark[]
  annoucementdislike  annoucementdislike[]
  video               video[]
  like                like[]
  announcementcomment announcementcomment[]
}

model video {
  id          Int          @id @default(autoincrement())
  title       String
  discription String
  thumnailurl String
  videourl    String
  publish     Boolean      @default(true)
  createdat   DateTime     @default(now())
  userid      String
  user        user         @relation(fields: [userid], references: [id], onDelete: Cascade)
  comment     comment[]
  watchlater  watchlater[]
  dislike     dislike[]
  views       views[]
  like        like[]
}

model comment {
  id          Int           @id @default(autoincrement())
  comment     String
  userId      String
  videoId     Int
  createdat   DateTime      @default(now())
  user        user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  video       video         @relation(fields: [videoId], references: [id], onDelete: Cascade)
  commentlike commentlike[]
}

model like {
  id        Int      @id @default(autoincrement())
  userId    String
  videoId   Int
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model dislike {
  id      Int    @id @default(autoincrement())
  userId  String
  videoId Int
  user    user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model watchlater {
  id        Int      @id @default(autoincrement())
  userId    String
  vedioId   Int
  createdat DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     video    @relation(fields: [vedioId], references: [id], onDelete: Cascade)
}

model follows {
  id        Int    @id @default(autoincrement())
  follwerId String
  userId    String
  follower  user   @relation(fields: [follwerId], references: [id], onDelete: Cascade)
}

model commentlike {
  id        Int     @id @default(autoincrement())
  userid    String
  commentid Int
  user      user    @relation(fields: [userid], references: [id], onDelete: Cascade)
  comment   comment @relation(fields: [commentid], references: [id], onDelete: Cascade)
}

model views {
  id        Int      @id @default(autoincrement())
  userid    String
  videoid   Int
  viewedat  DateTime @default(now())
  updatedat String   @default("0")
  user      user     @relation(fields: [userid], references: [id], onDelete: Cascade)
  video     video    @relation(fields: [videoid], references: [id], onDelete: Cascade)
}

model annoucement {
  id                  Int                   @id @default(autoincrement())
  title               String
  discription         String
  userid              String
  createdat           DateTime              @default(now())
  user                user                  @relation(fields: [userid], references: [id], onDelete: Cascade)
  annoucementlike     annoucementlike[]
  annoucementbookmark annoucementbookmark[]
  annoucementdislike  annoucementdislike[]
  announcementcomment announcementcomment[]
}

model annoucementlike {
  id            Int         @id @default(autoincrement())
  userid        String
  annoucementid Int
  user          user        @relation(fields: [userid], references: [id], onDelete: Cascade)
  annoucement   annoucement @relation(fields: [annoucementid], references: [id], onDelete: Cascade)
}

model annoucementdislike {
  id            Int         @id @default(autoincrement())
  userid        String
  annoucementid Int
  user          user        @relation(fields: [userid], references: [id], onDelete: Cascade)
  annoucement   annoucement @relation(fields: [annoucementid], references: [id], onDelete: Cascade)
}

model annoucementbookmark {
  id            Int         @id @default(autoincrement())
  userid        String
  annoucementid Int
  user          user        @relation(fields: [userid], references: [id], onDelete: Cascade)
  annoucement   annoucement @relation(fields: [annoucementid], references: [id], onDelete: Cascade)
}

model announcementcomment {
  id             Int         @id @default(autoincrement())
  comment        String
  userid         String
  announcementid Int
  user           user        @relation(fields: [userid], references: [id], onDelete: Cascade)
  announcement   annoucement @relation(fields: [announcementid], references: [id], onDelete: Cascade)
}
